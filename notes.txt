1. Crear Proyecto                                                                           YA
2. Crear migraciones y modelo para el producto y crear seeders de productos y usuario       YA
3. Importar Cart composer require bumbummen99/shoppingcart                                  YA
4. Importar PayPayl sdk composer require paypal/rest-api-sdk-php                            YA
5. Importar clase PayPalService y PayPalServiceChecker                                      YA
6. Crear controladores para el home con productos, checkout y para la pagina de status      YA
7. Crear rutas para las paginas home, checkout y status                                     YA
8. Listar productos en home                                                                 YA
9. Listar productos en el checkout                                                                                                               
10. Usar clases creadas para conectarse a paypal 

TODOS:

0. Cambiar las rutas del checkout que tengo ahorita a cart ya que realmente es el cart al que estoy enviando            YA

1. Revisar funcionalidad general que la clase paypalService no sea una clase acoplada.
    Que sea configurable las rutas de confirmed y cancel ACTUALMENTE DEPENDEN DE LA RUTA status 
    // LO QUE PODRIA HACER ES QUE SE ENVIE COMO METODO O SE SETEE COMO PROPIEDAD LAS RUTAS 

2. Crear ruta y vista para el checkout donde se listara los productos mas el tax y se mostrara las opciones de pago  y crear la interface el contrato para las clases "service" para 
las pasarelas de pago

3. Crear checkout form 
    - Dinamico debe cambiar segun la data ingresada en el admin panel 
    - Falta agregarle direccion de factura y direccion de envio ver ejemplos para ver cuantos inputs agregar al form 
    - Tipo de pago debe ser dinamico segun opciones que el usuario habilite se mostraran las opciones de pago (Cuando seleccione el metodo se agregara un input hidden)
    asi se sabra que clase PaymentGatewayService se usara. (se puede usar el helper str de laravel y usar el metodo camelcase para que dinamicamente cambie la clase)
    - agregar seccion de cupones cuando exitan ya sea con codigo o promociones donde al seleccionar el producto automaticamente descuente el precio y solo ponga una fila de descuento por cupon 
    o un badge en el producto. 
    
3. Crear Dashboard de backend para agregar:
    - Tax
    - Cupones 
    - Promociones 
    - Ordenes de envio 
    - Invoices 
    - Metodos de pago 
    - Empresa (modulo para branding)
